@page "/Cotizaciones/Edit/{CotizacionId:int}"
@using RegistrosTecnico.Components.Pages.TrabajoPage
@rendermode InteractiveServer
@inject ClientesServices clienteService
@inject TrabajoService trabajoService
@inject CotizacionServices cotizacionService
@inject CotizacionServices cotizacionesService
@inject CotizacionesDetalleService cotizacionesDetallesService
@inject NavigationManager navigation
@inject Contexto dbContext
@inject IJSRuntime JS

<PageTitle>Crear Cotizacion</PageTitle>
<EditForm Model="cotizaciones" OnInvalidSubmit="Modificar">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header text-center">
                <h1><strong>Crear cotizacion</strong></h1>
            </div>

            <div class="card-body">
                <label class="form-label" for="CotizacionId"><strong>Cotizacion ID:</strong></label>
                <InputNumber id="TrabajoId" class="form-control" @bind-Value="cotizaciones.CotizacionId" readonly></InputNumber>

                <label class="form-label" for="Fecha"><strong>Fecha</strong></label>
                <InputDate id="Fecha" class="form-control" @bind-Value="cotizaciones.Fecha"></InputDate>
                <ValidationMessage For="@(() => cotizaciones.Fecha)" />

                <label class="form-label"><strong>Cliente ID:</strong></label>
                <InputSelect @bind-Value="cotizaciones.ClienteId" class="form-control">
                    <option value="0">Seleccione el cliente</option>
                    @foreach (var client in ClienteList)
                    {
                        <option value="@client.ClientesId">@client.ClientesId</option>
                    }
                </InputSelect>

                <label class="form-label" for="observacion"><strong>Observacion:</strong></label>
                <InputText id="observacion" class="form-control" @bind-Value="cotizaciones.Observacion"></InputText>
                <ValidationMessage For="@(() => cotizaciones.Observacion)" />

                <label class="form-label" for="descripcion"><strong>Monto:</strong></label>
                <InputNumber id="descripcion" class="form-control" @bind-Value="cotizaciones.Monto"></InputNumber>
                <ValidationMessage For="@(() => cotizaciones.Monto)" />
            </div>
        </div>
    </div>

    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header text-center">
                <h5><strong>Detalles de artículos </strong></h5>
            </div>

            <div class="border border-success p-3 mt-3">
                <h5>Trabajo Detalle</h5>
                <TrabajoDestalle ListArticulos="ListaArticulos"
                                 ArticuloId="trabajoDetalle.ArticuloId"
                                 Cantidad="trabajoDetalle.Cantidad"
                                 precio="trabajoDetalle.Precio"
                                 ArticuloSeleccionado="AgregarCotizacion" />

                <hr />
                <table class="table table-light">
                    <thead class="table table-striped">
                        <tr class="text-center">
                            <th>Artículo ID</th>
                            <th>Cantidad</th>
                            <th>Precio</th>
                            <th>Remover</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var detalle in cotizaciones.ContizacionDetalles)
                        {
                            <tr class="text-center">
                                <td class="ps-3">@detalle.ArticuloId</td>
                                <td class="ps-3">@detalle.Cantidad</td>
                                <td class="ps-3">@detalle.Precio</td>
                                <td class="ps-3">
                                    <button type="button" class="btn btn-outline-danger bi bi-trash"
                                            @onclick="() => RemoverDetalle(detalle)"></button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
                <div class="card-footer">
                    <button type="button" class="btn btn-info text-white bi bi-arrow-90deg-left" @onclick="Volver"> Volver</button>
                    <button type="submit" class="btn btn-success bi bi-floppy-fill"> Guardar</button>
                </div>
            </div>
        </div>
    </div>

</EditForm>

@code {
    [Parameter]
    public int CotizacionId { get; set; }
    public Trabajos Trabajo { get; set; } = new Trabajos();
    public List<Tecnicos> TecnicoList { get; set; } = new List<Tecnicos>();
    public List<Clientes> ClienteList { get; set; } = new List<Clientes>();
    public List<Articulos> ListaArticulos { get; set; } = new List<Articulos>();
    public TrabajosDetalles trabajoDetalle { get; set; } = new TrabajosDetalles();
    public List<TrabajosDetalles> trabajoDetalleList { get; set; } = new List<TrabajosDetalles>();
    public Articulos articulos { get; set; } = new Articulos();
    public List<Trabajos> trabajoList { get; set; } = new List<Trabajos>();
    public Cotizaciones cotizaciones { get; set; } = new Cotizaciones();
    public double? Total { get; set; }
    public List<CotizacionDetalles> cotizacionDetalleList { get; set; } = new List<CotizacionDetalles>();
    public string mensaje { get; set; } = string.Empty;
    public CotizacionDetalles cotizacionesDetalles { get; set; } = new CotizacionDetalles();


    protected override async Task OnInitializedAsync()
    {
        cotizaciones = await cotizacionesService.BuscarConDetalles(CotizacionId);
        ClienteList = await clienteService.Listar(e => e.ClientesId > 0);
        ListaArticulos = await cotizacionesDetallesService.Listar(a => a.ArticuloId > 0);
    }

    private async Task AgregarCotizacion((Articulos articulos, int Cantidad) selection)
    {
        var ArticuloExiste = cotizaciones.ContizacionDetalles.FirstOrDefault(A => A.ArticuloId == selection.articulos.ArticuloId);
        if (ArticuloExiste != null)
        {
            ArticuloExiste.Cantidad += selection.Cantidad;
            ArticuloExiste.Precio = ArticuloExiste.Articulos.Precio * ArticuloExiste.Cantidad;
            Total += ArticuloExiste.Precio;
        }
        else
        {
            var CotizacionesDetalle = new CotizacionDetalles
                {
                    ArticuloId = selection.articulos.ArticuloId,
                    Cantidad = selection.Cantidad,
                    Precio = selection.articulos.Precio * selection.Cantidad,
                };
            Total += selection.articulos.Precio;
            cotizaciones.ContizacionDetalles.Add(CotizacionesDetalle);
            cotizacionesDetalles = new CotizacionDetalles();
            await Task.CompletedTask;
        }
    }

    private async Task Modificar()
    {
        if (!cotizaciones.ContizacionDetalles.Any())
        {
            mensaje = "Debe agregar al menos un articulo";
            return;
        }
        cotizaciones.Monto = Total;
        var crear = await cotizacionesService.Guardar(cotizaciones);
        cotizaciones = new Cotizaciones();

        if (crear)
        {
            mensaje = "Se ha creado correctamente la cotizacion";
            navigation.NavigateTo($"/Cotizaciones/Index");
        }
        else
        {
            mensaje = "No se ha creado correctamente la cotizacion";
        }

    }


    public void RemoverDetalle(CotizacionDetalles detalle)
    {
        cotizaciones.ContizacionDetalles.Remove(detalle);
        cotizacionesDetalles.ArticuloId = detalle.ArticuloId;
        cotizacionesDetalles.Cantidad = detalle.Cantidad;
        cotizacionesDetalles.Precio = detalle.Precio;
    }

    public void Volver()
    {
        navigation.NavigateTo("/Cotizaciones/Index");
    }
}
