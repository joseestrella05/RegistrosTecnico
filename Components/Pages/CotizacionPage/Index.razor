@page "/Cotizaciones/Index"
@using System.Linq.Expressions
@inject TrabajoService trabajoService
@inject TecnicoService tecnicoService
@inject ClientesServices clienteService
@inject CotizacionServices cotizacionService
@inject NavigationManager navigation

<PageTitle>Cotizaciones</PageTitle>

<div class="container card shadow-lg">
    <div class="card-header  ">
        <h3><strong>Cotizaciones</strong></h3>
        <a href="/Cotizaciones/Create" class="btn btn-success bi bi-plus-square-fill ms-2"> Crear</a>
    </div>

    <div class="row mb-3 align-items-end">
        <div class="col-md-3">
            <label for="Filtro" class="form-label"><strong>Filtrar por:</strong></label>
            <InputSelect id="filtro" class="form-select" @bind-Value="filtro">
                <option value="" disabled>Seleccionar</option>
                <option value="Fecha">Fecha</option>
                <option value="Cliente">Cliente ID</option>

            </InputSelect>
        </div>

        <div class="col-md-6">
            <label for="ValorFiltro" class="form-label"><strong>Búsqueda:</strong></label>
            <div class="input-group">
                <input @bind="ValorFiltro" class="form-control" placeholder="Buscar" />
                <button @onclick="Buscar" class="btn btn-success" type="button">
                    <span class="bi bi-search"></span> Buscar
                </button>
            </div>
        </div>

        <div class="col-md-3">
            <div class="row">
                <div class="col-md-6">
                    <label for="FechaInicial" class="form-label"><strong>Fecha Inicial:</strong></label>
                    <input type="date" @bind="Desde" class="form-control" />
                </div>
                <div class="col-md-6">
                    <label for="FechaFinal" class="form-label"><strong>Fecha Final:</strong></label>
                    <input type="date" @bind="Hasta" class="form-control" />
                </div>
            </div>
        </div>
    </div>

    <!-- Body -->
    <div class="card-body">
        <table class="table table-light table-bordered">
            <thead class="table table-striped text-center table-bordered mt-3">
                <tr>
                    <th>Cotizacion ID</th>
                    <th>Fecha</th>
                    <th>Cliente ID</th>
                    <th>Observacion</th>
                    <th>Monto</th>
                    <th>Editar</th>
                    <th>Eliminar</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var cotizacion in CotizacionesList)
                {
                    <tr>
                        <td class="text-center">@cotizacion.CotizacionId</td>
                        <td class="text-center">@cotizacion.Fecha</td>
                        <td class="text-center">@cotizacion.ClienteId</td>
                        <td class="text-center">@cotizacion.Observacion</td>
                        <td class="text-center">@cotizacion.Monto</td>
                        <td class="text-center">
                            <a href="/Cotizaciones/Edit/@cotizacion.CotizacionId" class="btn btn-outline-warning bi bi-pencil-square"></a>
                        </td>
                        <td class="text-center">
                            <a href="/Cotizaciones/Delete/@cotizacion.CotizacionId" class="btn btn-outline-danger bi bi-trash"></a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <div class="card-footer">
            <p><strong>Total de Cotizaciones: </strong>@CotizacionesList?.Count</p>
        </div>
    </div>
</div>

@code {
    public List<Trabajos> trabajos { get; set; } = new List<Trabajos>();
    public List<Clientes> ClienteList { get; set; } = new List<Clientes>();
    public List<Cotizaciones> CotizacionesList { get; set; } = new List<Cotizaciones>();
    public DateTime? Desde { get; set; }
    public DateTime? Hasta { get; set; }
    public string filtro { get; set; } = string.Empty;
    public string ValorFiltro { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        CotizacionesList = await cotizacionService.Listar(c => c.CotizacionId > 0);
        Desde = null;
        Hasta = null;
    }

    private async Task Buscar()
    {
        if (ValorFiltro.Trim() != "")
        {
            if (filtro == "Cliente")
            {
                CotizacionesList = await cotizacionService.Listar(e => e.Cliente.Nombres.ToLower().Contains(ValorFiltro.ToLower()) && e.Fecha >= Desde && e.Fecha <= Hasta);
            }

        }
        else if (filtro == "Fecha")
        {
            CotizacionesList = await cotizacionService
            .Listar(f => f.Fecha >= Desde && f.Fecha <= Hasta);
        }
        else
        {
            CotizacionesList = await cotizacionService.Listar(e => e.CotizacionId > 0);
        }
    }
}
