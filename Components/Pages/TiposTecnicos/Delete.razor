@page "/TipoTecnico/Delete/{tecnicosId:int}"
@inject TiposTecnicoServices tecnicoService
@rendermode InteractiveServer
@inject NavigationManager navigation

<PageTitle>Eliminar tipo de t&eacute;cnico</PageTitle>
<EditForm Model="tecnico" OnValidSubmit="EliminarTecnico">
    <DataAnnotationsValidator />
    <Toasts class="p-3" Messages="MensajeToast" Placement="ToastsPlacement.TopRight" />
    <div class="container">
        <div class="card shadow-lg">
            @*Header*@
            <div class="card-header bg-primary text-white">
                <h3><strong>Eliminar tipo de t&eacute;cnico</strong></h3>
            </div>
            @*Body*@
            <div class="card-body">
                <h5><strong>¿Est&aacute;s seguro de que quieres eliminar este tipo de t&eacute;cnico?</strong></h5>
                @*Datos*@
                <div class="mb-1">
                    <p class="mb-0">TipoId: @tecnico.TipoId</p>
                </div>
                <div class="mb-1">
                    <p class="mb-0">Descripci&oacute;n: @tecnico.Descripcion</p>
                </div>
            </div>
            @*Footer*@
            <div class="card-footer">
                <a type="button" href="/TipoTecnico/Index" class="btn btn-outline-danger"><span class="bi bi-arrow-bar-left"></span> Volver </a>
                <button type="button" class="btn btn-danger bi bi-trash-fill" @onclick="EliminarTecnico">  Eliminar</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int tecnicosId { get; set; }
    public TiposTecnicos tecnico { get; set; } = new TiposTecnicos();
    List<ToastMessage> MensajeToast = new List<ToastMessage>();

    protected override async Task OnInitializedAsync()
    {
        if (tecnicosId > 0)
            tecnico = (await tecnicoService.Buscar(tecnicosId))!;
    }

    private ToastMessage CreateToastMessage(ToastType toastType, string mensaje)
       => new ToastMessage
       {
           Type = toastType,
           Title = "Notificación",
           HelpText = $"{DateTime.Now}",
           Message = mensaje,
       };

    private void Mensaje(ToastType toastType, string mensaje)
    {
        MensajeToast.Add(CreateToastMessage(toastType, mensaje));
    }


    public async Task EliminarTecnico()
    {
        var eliminar = await tecnicoService.Eliminar(tecnico.TipoId);
        if (eliminar)
        {
            Mensaje(ToastType.Success, "Tipo de técnico eliminado correctamente.");
            navigation.NavigateTo("/TipoTecnico/Index");
        }
        else
        {
            Mensaje(ToastType.Danger, "No se ha podido eliminar el tipo de técnico.");
        }

    }
}