@page "/Trabajo/Create"
@rendermode InteractiveServer
@inject TrabajoService TrabajoServices
@inject TecnicoService TecnicoServices
@inject ClientesServices ClienteService
@inject PrioridadService PrioridaServices
@inject ArticuloService ArticulosServices
@inject NavigationManager navigation

<PageTitle>Crear Trabajo</PageTitle>

<EditForm Model="@Trabajo" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="container">
        <div class="card">
            <div class="card-header">
                <h2 class="card-title">Crear Trabajo</h2>
            </div>
            <div class="card-body">

                @*Cliente*@

                <div class="mb-3">
                    <label class="form-label">Cliente</label>
                    <InputSelect class="form-select" @bind-Value="Trabajo.ClienteId">
                        <option value="0">--Elija un cliente--</option>
                        @foreach (var Cliente in Clientes)
                        {
                            <option value="@Cliente.ClientesId">@Cliente.Nombres</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => Trabajo.ClienteId)" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Tecnico</label>
                    <InputSelect class="form-select" @bind-Value="Trabajo.TecnicoId">
                        <option value="0">--Elija una tecnico--</option>
                        @foreach (var Tecnico in Tecnicos)
                        {
                            <option value="@Tecnico.TecnicoId">@Tecnico.Nombres (@Tecnico.TipoTecnico?.Descripcion)</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => Trabajo.TecnicoId)" />
                </div>
    
                
                <div class="mb-3">
                    <label class="form-label">Prioridad</label>
                    <InputSelect class="form-select" @bind-Value="Trabajo.PrioridadId">
                        <option value="0">--Elija una prioridad--</option>
                        @foreach (var Prioridad in Prioridades)
                        {
                            <option value="@Prioridad.PrioridadId">@Prioridad.Descripcion</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => Trabajo.PrioridadId)" />
                </div>

                <div class="col">
                    <label class="form-label">Fecha del trabajo:</label>
                    <InputDate class="form-control" @bind-Value="Trabajo.Fecha">@Trabajo.Fecha</InputDate>
                    <ValidationMessage For="@(() => Trabajo.Fecha)" />
                </div>

                <div>
                    <label class="form-label">Descripcion:</label>
                    <InputText class="form-control" @bind-Value="Trabajo.Descripcion" />
                    <ValidationMessage For="@(() => Trabajo.Descripcion)" />
                </div>

                <div>
                    <label class="form-label">Precio del Trabajo:</label>
                    <InputNumber class="form-control" @bind-Value="Trabajo.Monto" />
                    <ValidationMessage For="@(() => Trabajo.Monto)" />
                </div>
                
                <div class="border border-success p-3 mt-3">
                    <h5>Detalle del articulos</h5>

					<TrabajoDestalle ListArticulos="ListArticulos"
                      ArticuloId="Detalles.ArticuloId"
                      Cantidad="Detalles.Cantidad"
                      precio="Detalles.Precio"
                      ArticuloSeleccionado="AgregarDetalle"/>

                    <hr>
                        <table class="table table-light">
                            <thead class="table table-striped">
                                <tr class="Text-center">
                                    <th>Id Articulo</th>
                                    <th>Cantidad Utilizada</th>
                                    <th>Precio</th>
                                    <th>Total</th>
                                    <th>Remover</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var Detalle in Trabajo.TrabajosDetalles)
                                {
                                    <tr class="Text-center">
                                        <th>@Detalle.ArticuloId</th>
                                        <th>@Detalle.Cantidad</th>
                                        <th>@Detalle.Precio</th>
                                        <th>@(Detalle.Precio * Detalle.Cantidad)</th>
                                        <th>  
                                            <button type="button" @onclick=" ()=> Eliminar(Detalle)" class="btn btn-outline-danger bi bi-trash mt-2"> Remover</button>
                                        </th>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    <hr />
                    
                </div>
                    
              </div>
            <div class="card-footer">
                <a href="/Trabajo/index" class="btn btn-outline-primary bi bi-arrow-left mt-2">Volver</a>
                <button type="submit" class="btn btn-outline-success bi bi-floppy mt-2">Guardar</button>
            </div>

        </div>

    </div>
  
   
</EditForm>

@code {
    public Trabajos Trabajo { get; set; } = new Trabajos();
    public List<Tecnicos> Tecnicos = new List<Tecnicos>();
    public List<Clientes> Clientes = new List<Clientes>();
    public List<Prioridades> Prioridades = new List<Prioridades>();
    public List<Articulos> ListArticulos { get; set; } = [];
    public TrabajosDetalles Detalles { get; set; } = new TrabajosDetalles();

    protected override async Task OnInitializedAsync()
    {
        Tecnicos = await TecnicoServices.Listar(t => true);
        Clientes = await ClienteService.Listar(c => true);
        Prioridades = await PrioridaServices.Listar(p => true);
        ListArticulos = await ArticulosServices.Listar(A => true);
    }

    private async Task AgregarDetalle((Articulos articulos, int cantidad) selection)
    {
        var ArticuloExiste = Trabajo.TrabajosDetalles
        .FirstOrDefault(A => A.ArticuloId == selection.articulos.ArticuloId);
        if (ArticuloExiste != null)
        {
            ArticuloExiste.Cantidad += selection.cantidad;
        }
        else
        {
            var TrabajosDetalle = new TrabajosDetalles
                {
                    ArticuloId = selection.articulos.ArticuloId,
                    Cantidad = selection.cantidad,
                    Precio = selection.articulos.Precio,
                    Costo = selection.articulos.Costo
                };
            Trabajo.TrabajosDetalles.Add(TrabajosDetalle);
            Detalles = new TrabajosDetalles();
            await Task.CompletedTask;
        }
    }
    public void Eliminar(TrabajosDetalles detalle)
    {
        Trabajo.TrabajosDetalles.Remove(detalle);
        Detalles.Cantidad = detalle.Cantidad;
        Detalles.ArticuloId = detalle.ArticuloId;
        Detalles.Precio = detalle.Precio;
    }
    public async Task Guardar()
    {
        await TrabajoServices.Guardar(Trabajo);
        navigation.NavigateTo("/Trabajo/index");
    }

}