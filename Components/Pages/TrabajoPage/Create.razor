@page "/Trabajo/Create"
@rendermode InteractiveServer
@inject TrabajoService trabajoService
@inject TecnicoService tecnicoService
@inject ClientesServices clienteService
@inject PrioridadService prioridadService
@inject NavigationManager navigation

<PageTitle>Crear Trabajo</PageTitle>

<EditForm Model="@Trabajo" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <Toasts class="p-3" Messages="MensajeToast" Placement="ToastsPlacement.TopRight" />
    <div class="container">
        <div class="Contenedor_Secundario">
            @*header*@
            <div class="card-header bg-primary text-white text-center">
                <h2><strong>Crear nuevo t&eacute;cnico</strong></h2>
            </div>

            @*Body*@
            <div class="card-body">
                @*Id*@
                <label class="form-label" for="id"><strong>TrabajoId</strong></label>
                <InputNumber id="id" class="form-control" @bind-Value="Trabajo.TrabajoId" readonly></InputNumber>

                @*Fecha*@
                <label class="form-label" for="fecha"><strong>Fecha</strong></label>
                <InputDate id="fecha" class="form-control" @bind-Value="Trabajo.Fecha" readonly>@Trabajo.Fecha </InputDate>

                @*Cliente*@
                <label class="form-label">Cliente</label>
                <InputSelect @bind-Value="Trabajo.ClienteId" class="form-control">
                    <option value="0">Seleciona el Cliente</option>
                    @foreach (var Cliente in Clientes)
                    {
                        <option value="@Cliente.ClientesId">@Cliente.Nombres</option>
                    }
                </InputSelect>

                @*Tecnico*@
                <label class="form-label">Tecnico</label>
                <InputSelect @bind-Value="Trabajo.TecnicoId" class="form-control">
                    <option value="0">Seleciona el tipo de tecnico</option>
                    @foreach (var Tecnico in Tecnicos)
                    {
                        <option value="@Tecnico.TecnicoId">@Tecnico.Nombres</option>
                    }
                </InputSelect>

                @*Descripcion*@
                <label class="form-label" for="descripcio">Descripci&oacute;n</label>
                <InputText @bind-Value="Trabajo.Descripcion" class="form-control" />
                <ValidationMessage For="@(() => Trabajo.Descripcion)" />

               <label class="form-label">Prioridad</label>
                <InputSelect @bind-Value="Trabajo.PrioridadId" class="form-control">
                    <option value="0">Seleciona una prioridad</option>
                    @foreach (var Prioridad in prioridades)
                    {
                        <option value="@Prioridad.PrioridadId">@Prioridad.Descripcion</option>
                    }
                </InputSelect>
                
                @*Monto*@
                <label class="form-label" for="monto">Monto</label>
                <InputNumber @bind-Value="Trabajo.Monto" class="form-control" />
                <ValidationMessage For="@(() => Trabajo.Monto)" />


            </div>

            <div>
                @*footer*@
                <div class="card-footer">
                    <a type="button" href="/Trabajo/Index" class="btn btn-outline-danger"><span class="bi bi-arrow-bar-left"></span> Volver </a>
                    <button type="submit" class="btn btn-success bi bi-floppy-fill">Guardar</button>
                </div>
            </div>


        </div>

    </div>

</EditForm>

@code {
    public Trabajos Trabajo { get; set; } = new Trabajos();
    public List<Tecnicos> Tecnicos = new List<Tecnicos>();
    public List<Clientes> Clientes = new List<Clientes>();
    public List<Prioridades> prioridades = new List<Prioridades>();
    List<ToastMessage> MensajeToast = new List<ToastMessage>();

    private ToastMessage CreateToastMessage(ToastType toastType, string mensaje)
    => new ToastMessage
        {
            Type = toastType,
            Title = "Notificación",
            HelpText = $"{DateTime.Now}",
            Message = mensaje,
        };

    private void Mensaje(ToastType toastType, string mensaje)
    {
        MensajeToast.Add(CreateToastMessage(toastType, mensaje));
    }

    protected override async Task OnInitializedAsync()
    {
        Tecnicos = await tecnicoService.Listar(a => true);
        Clientes = await clienteService.Listar(a => true);
        prioridades = await prioridadService.Listar(a => true);
    }
    public async Task Guardar()
    {
        if (string.IsNullOrWhiteSpace(Trabajo.Descripcion) || Trabajo.Monto < 0)
        {
            Mensaje(ToastType.Danger, "Llene todo los campos correctamente.");
            return;
        }

        var nombreExiste = await trabajoService.ExisteDescripcion(Trabajo.Descripcion);
        if (nombreExiste)
        {
            Mensaje(ToastType.Danger, "Ya existe una decripcion con ese mismo nombre.");
            return;
        }

        await trabajoService.Guardar(Trabajo);
        Mensaje(ToastType.Success, "Trabajo guardado correctamente.");
        
    }

}

