@page "/Trabajo/Edit/{TrabajoId:int}"
@rendermode InteractiveServer
@inject TecnicoService tecnicoService
@inject TrabajoService trabajoService
@inject ClientesServices clienteService
@inject PrioridadService prioridadService
@inject ArticuloService ArticulosServices
@inject NavigationManager navigation

<PageTitle>Editar Trabajo</PageTitle>
<EditForm Model="Trabajo" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="container">
        <div class="card shadow-lg">
            @*Header*@
            <div class="card-header bg-primary text-white text-center">
                <h2><strong>Modificar técnico</strong></h2>
            </div>
            @*Body*@
            <div class="card-body">
                @*Id*@
                <label class="form-label" for="id"><strong>TrabajoId</strong></label>
                <InputNumber id="id" class="form-control" @bind-Value="Trabajo.TrabajoId" readonly></InputNumber>

                @*Fecha*@
                <label class="form-label" for="fecha"><strong>Fecha</strong></label>
                <InputDate id="fecha" class="form-control" @bind-Value="Trabajo.Fecha" readonly>@Trabajo.Fecha  </InputDate>

                @*Cliente*@
                <label class="form-label">Cliente</label>
                <InputSelect @bind-Value="Trabajo.ClienteId" class="form-control">
                    <option value="0">Seleciona el Cliente</option>
                    @foreach (var Cliente in Clientes)
                    {
                        <option value="@Cliente.ClientesId">@Cliente.Nombres</option>
                    }
                </InputSelect>

                @*Tecnico*@
                <label class="form-label">Tecnico</label>
                <InputSelect @bind-Value="Trabajo.TecnicoId" class="form-control">
                    <option value="0">Seleciona el tipo de tecnico</option>
                    @foreach (var Tecnico in Tecnicos)
                    {
                        <option value="@Tecnico.TecnicoId">@Tecnico.Nombres</option>
                    }
                </InputSelect>

                @*Descripcion*@
                <label class="form-label" for="descripcio">Descripci&oacute;n</label>
                <InputText @bind-Value="Trabajo.Descripcion" class="form-control" />
                <ValidationMessage For="@(() => Trabajo.Descripcion)" />

                <label class="form-label">Prioridad</label>
                <InputSelect @bind-Value="Trabajo.PrioridadId" class="form-control">
                    <option value="0">Seleciona una prioridad</option>
                    @foreach (var Prioridad in Prioridades)
                    {
                        <option value="@Prioridad.PrioridadId">@Prioridad.Descripcion</option>
                    }
                </InputSelect>
                
                @*Monto*@
                <label class="form-label" for="monto">Monto</label>
                <InputNumber @bind-Value="Trabajo.Monto" class="form-control" />
                <ValidationMessage For="@(() => Trabajo.Monto)" />

                <div class="border border-success p-3 mt-3">
                    <TrabajoDestalle ListArticulos="ListArticulos"
                                     ArticuloId="Detalles.ArticuloId"
                                     Cantidad="Detalles.Cantidad"
                                     precio="Detalles.Precio"
                                     ArticuloSeleccionado="AgregarDetalle" />

                    <div>
                        <table class="table table-light">
                            <thead class="table table-striped">
                                <tr class="Text-center">
                                    <th>Id Articulo</th>
                                    <th>Cantidad Utilizada</th>
                                    <th>Precio</th>
                                    <th>Total</th>
                                    <th>Eliminar</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var Detalle in Trabajo.TrabajosDetalles)
                                {
                                    <tr class="Text-center">
                                        <th>@Detalle.ArticuloId</th>
                                        <th>@Detalle.Cantidad</th>
                                        <th>@Detalle.Precio</th>
                                        <th>@(Detalle.Precio * Detalle.Cantidad)</th>
                                        <th>
                                            <button type="button" @onclick=" ()=> Eliminar(Detalle)" class="btn btn-outline-danger bi bi-trash mt-2"> Remover</button>
                                        </th>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                </div>


            </div>
            <div class="card-footer">
                <a type="button" href="/Trabajo/Index" class="btn btn-outline-danger"><span class="bi bi-arrow-bar-left"></span> Volver </a>
                <button type="submit" class="btn btn-success bi bi-pencil-fill"> Modificar</button>
            </div>
        </div>

    </div>

</EditForm>




@code {
    [Parameter]
    public int TrabajoId { get; set; }
    public Trabajos Trabajo { get; set; } = new Trabajos();
    public List<Tecnicos> Tecnicos = new List<Tecnicos>();
    public List<Clientes> Clientes = new List<Clientes>();
    public List<Prioridades> Prioridades = new List<Prioridades>();
    public TrabajosDetalles Detalles { get; set; } = new TrabajosDetalles();
    public List<Articulos> ListArticulos { get; set; } = [];


    string Mensaje { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        Trabajo = await trabajoService.Buscar(TrabajoId);
        Tecnicos = await tecnicoService.Listar(a => true);
        Clientes = await clienteService.Listar(a => true);
        Prioridades = await prioridadService.Listar(p => true);
        ListArticulos = await ArticulosServices.Listar(A => true);

    }
    private async Task AgregarDetalle((Articulos articulos, int cantidad) selection)
    {
        var ArticuloExiste = Trabajo.TrabajosDetalles
        .FirstOrDefault(A => A.ArticuloId == selection.articulos.ArticuloId);
        if (ArticuloExiste != null)
        {
            ArticuloExiste.Cantidad += selection.cantidad;
        }
        else
        {
            var TrabajosDetalle = new TrabajosDetalles
                {
                    ArticuloId = selection.articulos.ArticuloId,
                    Cantidad = selection.cantidad,
                    Precio = selection.articulos.Precio,
                    Costo = selection.articulos.Costo
                };
            Trabajo.TrabajosDetalles.Add(TrabajosDetalle);
            Detalles = new TrabajosDetalles();
            await Task.CompletedTask;
        }
    }
    public async Task Eliminar(TrabajosDetalles detalle)
    {
        Trabajo.TrabajosDetalles.Remove(detalle);
        Detalles.Cantidad = detalle.Cantidad;
        Detalles.ArticuloId = detalle.ArticuloId;
    }

    public async Task Guardar()
    {
        await trabajoService.Guardar(Trabajo);
        navigation.NavigateTo("/Trabajo/index");

    }
    public void Volver()
    {
        navigation.NavigateTo("/Trabajo/index");
    }

}
